#!/bin/bash
# This is an example of my dotfiles after clone script.
# I use pathogen in my .vimrc so I am writing a script to clone
# down my git vim add ons.  I want to make sure that I clone to the
# appropriate folder so the DIR variable you see below is used to
# hold scope of where this file is downloaded to.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# bundle variable points to where my git repo's will be cloned for
# pathogen to find and include them.

bundle=$DIR/.vim/bundle

# I now clone my pathogen vim goodies

if [ -e $HOME/.oh-my-zsh ]; then
  cp tim.zsh-theme $HOME/.oh-my-zsh/themes
fi

if [ ! -e $bundle/ack.vim ]; then
  git clone git@github.com:mileszs/ack.vim.git $bundle/ack.vim/
fi

if [ ! -e $bundle/tcomment_vim ]; then
  git clone git@github.com:tomtom/tcomment_vim.git $bundle/tcomment_vim/
fi

if [ ! -e $bundle/vim-fugitive ]; then
  git clone git@github.com:tpope/vim-fugitive.git $bundle/vim-fugitive/
fi

if [ ! -e $bundle/vim-rails ]; then
  git clone git@github.com:tpope/vim-rails.git $bundle/vim-rails/
fi

if [ ! -e $bundle/vim-ruby ]; then
  git clone git@github.com:vim-ruby/vim-ruby.git $bundle/vim-ruby/
fi

# For command-t you have to load the c extensions. This is tricky
# considering you have to create them using the same version of
# ruby that vim was compiled for.  When I clone dotman I make
# sure to clone using the version on ruby that my vim was compiled
# for.  This has typically been 1.8.7, however recently I've seen
# it compiled for 1.9.2.  I use apt-get install vim-nox on ubuntu
# or lubuntu.

if [ ! -e $bundle/Command-T ]; then
  git clone git@github.com:wincent/Command-T.git $bundle/Command-T/
  cd $bundle/Command-T/ruby/command-t/
  ruby extconf.rb
  make 
fi
